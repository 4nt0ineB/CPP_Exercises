#+TITLE: Les templates
#+subtitle: On va faire des collages


* But de ce TP
Les images sont des tableaux de *pixels*.
On va utiliser des templates pour définir des images de *taille statique* utilisant plusieurs types de pixels.
Tout au long tu TP, votre code produira des images dans le dossier ~images~ situé dans votre dosser de build (pas celui à la racine de votre dossier).


* Les tests pas à pas
** TODO Test 01: Image
/On travaillera dans image.hpp/

On définit une classe template ~Image<typename P, size_t W, size_t H>~ où (W,H) est la dimension de l'image et P le type utilisé pour les pixels (au début on utilisera des entiers simples).

Attention, l'image doît être stockée en *lignes* et pas en *colones*.

On appelle **row-major** une image qui est stockée ligne par ligne et **column-major** une image qui est stockée colone par colone. Voici un schéma explicatif:
[[./figures/Row_and_column_major.png]]

Vous utiliserez un std::array nesté ~std::array<std::array<P, W>, H>~ pour stocker les pixels.

On doit avoir:
+ un constructeur ~Image(const P & pix)~ prenant un pixel de remplissage et construisant une image unie
+ un constructeur par défault ~Image()~ (on a pas besoin d'initialiser les pixels, vous pouvez utiliser ~default~)

  
On veut aussi pouvoir utiliser img(i,j) pour accéder au pixel de la j-ème ligne et de la i-ème colone, on va pour cela implémenter:
+ ~P & operator(const size_t i, const size_t j)~
+ ~const P & operator(const size_t i, const size_t j) const~

Ensuite, on veux pouvoir additioner deux image de même tailles, en additionants les pixels un par un.
Ainsi on aura \((img_1 + img_2)(i,j) = img_1(i,j) + img_2(i,j)\).
Overloadez l'opérateur + hors de la classe, ça sera plus facile pour la suite.

Ajoutez le constructeur:
#+begin_src c++
    Image<P, W, H>(const std::function<P(const size_t i, const size_t j)> & functor)
    {
        // todo
    }
#+end_src
Où functor(i,j) est une valeur de pixel à mettre en (i,j).

** TODO Test 02: Image IO
Rien à faire

** TODO Test 03: Procedural Images
Ici rien à faire, regardez juste les images générées dans build/images.
(ne confondez pas avec le dossier images à la racine de votre projet).

** TODO Test 04: Pixels
/On travaillera dans pixels.hpp/

On va définir nos propres types de pixels: les ~struct~ RGBA, RGB, et Luma.
|      | Nombre de canaux/taille en octets   | Description           |
|------+-------------------------------------+-----------------------|
| RGBA |                                   4 | Rouge,Vert,Bleu,Alpha |
| RGB  |                                   3 | Rouge,Vert,Bleu       |
| Luma |                                   1 | Niveau de Gris        |

Implémentez ces trois ~struct~, en utilisant le type uint8_t ou unsigned char pour les valeurs des canaux.

On va ensuite vouloir *convertir* les pixels entre eux.
On va donc créer une fonction template

#+begin_src c++
template<typename A, typename B>
A from(const B & stuff);
#+end_src

Implémentez les cas de conversions suivants:

| Entrée | Sortie | Méthode                                      |
|--------+--------+----------------------------------------------|
| RGBA   | RGBA   | on retourne juste la valeur qu'on reçoit     |
| RGB    | RGB    | on retourne juste la valeur qu'on reçoit     |
| Luma   | Luma   | on retourne juste la valeur qu'on reçoit     |
| RGBA   | RGB    | on retire le canal alpha                     |
| RGB    | RGBA   | on met 255 pour le canal alpha               |
| RGB    | Luma   | on utilise lib::rgb_to_grayscale()           |
| Luma   | RGB    | on utilise lib::grayscale_to_rgb()           |
| RGBA   | Luma   | On utilise from<RGBA, RGB> et from<RGB,Luma> |
| Luma   | RGBA   | On utilise from<Luma, RGB> et from<RGB,RGBA> |

Remarquez qu'on aurait pu avoir l'idée de faire les 3 premiers cas en une seule fois avec
#+begin_src c++
template<typename A>
A from(const A & x)
{
    return x;
}
#+end_src

Mais attention! c++ n'autorise pas la spécialisation partielle de fonctions templates, et ça n'est donc pas possible (il aurait fallut utiliser une class ou une struct, ce qu'on ne fera pas aujourd'hui).

Pour spécialiser la fonction, suivez ce modèle:
#+begin_src c++
template<>
RGBA from(const RGB & x)
{
    return {x.r,x.g,x.b,255};
}
#+end_src






** TODO Test 05: Combiner des images
On veut pouvoir additioner les différents pixels qu'on a définit pour pouvoir combiner des images.
On peut:
+ soit /blender/ les couleurs de deux pixels (en utilisant la fonction mix_color de la lib du TP)
+ soit se servir de l'image de droite comme un /masque de transparence/.
  # METTRE Images d'exemple.
On va se baser sur ce tableau pour savoir quoi faire:
| A    | B    | effet                  | Type sortant C |
|------+------+------------------------+----------------|
| tout | Luma | masque de transparence | RGBA           |
| tout | RGBA | blending               | RGBA           |
| RGBA | RGB  | blending               | RGBA           |
| RGB  | RGB  | blending               | RGB            |
| Luma | RGB  | blending               | RGB            |


*** color blending
Écrivez une fonction ~blend_two_rgba~ qui prend deux RGBA et les blend en utilisant lib::mix_color.

Ensuite, vous pouvez utiliser cette fonction pour implémenter tous les ~C operator+(const A & lhs, const B & rhs)~ nécessaires.

Astuce: si vous êtes en confiance et que vous avez du temps, vous pouvez vous arranger écrire une macro avec ~#define~ pour ne pas avoir à réécrire 6 fois la même fonction.

Vous auriez quelque chose comme ça:
#+begin_src c++
IMPL_ADD(RGBA, RGBA, RGBA);
IMPL_ADD(RGBA, RGB , RGBA);
IMPL_ADD(RGB , RGBA, RGB );
IMPL_ADD(Luma, RGBA, RGBA);
IMPL_ADD(Luma, RGB , RGB);
IMPL_ADD(RGB , RGB , RGB);
#+end_src

Vous pouvez vous passer de la macro (c'est d'ailleurs conseillé si vous n'êtes pas en avance).

*** Luma as alpha mask

Pour celle-là, il suffit d'écrire que cette fonction template sans spécialisation:
#+begin_src c++
// mask operator
template<typename A>
RGBA
operator+(const A    & lhs,
          const Luma & mask)
{
    // todo
}
#+end_src

Il est attendu que la sortie soit toujours du RGBA (vu que c'est le seul type de pixel ayant de la transparence).
La valeur alpha de la sortie sera celle de lhs fois la valeur de gris de mask, le tout divisé par 255.


/dans image.hpp/

Normalement à ce stade, il manque une chose: revenez à Image et regardez l'opérateur+
#+begin_src c++
template<const size_t W, const size_t H, typename A, typename B>
Image<A, W, H>
operator+(const Image<A, W, H> & lhs, const Image<B, W, H> & rhs)
{
    // des trucs
}
#+end_src
Remarquez que le type de retour est le même que le type à gauche. Hors on veut ajouter ces exceptions:

| A    | B    | Sortie |
|------+------+--------|
| tout | Luma | RGBA   |

Il suffit de rajouter une spécialisation de l'opérateur + de image.


À ce stade, vous pouvez regarder les images générées dans build/images: votre code produit des montages à partir des fonctionalitées que vous avez implémenté!


